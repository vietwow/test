package main

import (
	"bytes"
	"context"
	"io/ioutil"
	"log"
	"net"
	"os"
	"os/signal"
	"time"

	"github.com/spf13/viper"
	"google.golang.org/grpc"

	"github.com/go-pg/pg"
	"github.com/go-pg/pg/orm"

	pb "github.com/vietwow/test/pb"
)

const (
	port = ":50051"
)

type UserService struct {
	db *pg.DB
}

func NewUserService(db *pg.DB) *UserService {
	return &UserService{db: db}
}

func initConfig() error {
	viper.SetConfigType("yaml")
	viper.SetDefault("DB_HOST", "localhost:5432")
	viper.SetDefault("DB_USERNAME", "postgres")
	viper.SetDefault("DB_PASSWORD", "newhacker")
	viper.SetDefault("DB_SCHEMA", "crud")

	configFilePath := "config.yaml"
	file, err := ioutil.ReadFile(configFilePath)
	if err != nil {
		return err
	}

	viper.ReadConfig(bytes.NewReader(file))
	if err != nil {
		return err
	}

	return nil
}

func main() {
	initConfig()

	DB_HOST := viper.GetString("DB_HOST")
	DB_USERNAME := viper.GetString("DB_USERNAME")
	DB_PASSWORD := viper.GetString("DB_PASSWORD")
	DB_SCHEMA := viper.GetString("DB_SCHEMA")

	// LogLevel := 0
	// LogTimeFormat := "2006-01-02T15:04:05.999999999Z07:00"
	// if err := logger.Init(LogLevel, LogTimeFormat); err != nil {
	// 	logger.Log.Fatal("failed to initialize logger:", zap.String("reason", err.Error()))
	// }

	listen, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	log.Println("Connecting to database...")
	db := pg.Connect(&pg.Options{
		User:                  DB_USERNAME,
		Password:              DB_PASSWORD,
		Database:              DB_SCHEMA,
		Addr:                  DB_HOST,
		RetryStatementTimeout: true,
		MaxRetries:            4,
		MinRetryBackoff:       250 * time.Millisecond,
	})

	defer db.Close()

	log.Println("Successfull Connected!")

	// Create Table from User struct generated by gRPC
	err = db.CreateTable(&pb.User{}, &orm.CreateTableOptions{
		IfNotExists:   true,
		FKConstraints: true,
	})
	if err != nil {
		log.Fatalf("Create Table Failed: %v", err)
	}

	// Creates a new gRPC server
	s := grpc.NewServer()
	// pb.RegisterUserServiceServer(s, &UserService{})
	pb.RegisterUserServiceServer(s, NewUserService(db))

	// graceful shutdown
	ctx := context.Background()

	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	go func() {
		for range c {
			// sig is a ^C, handle it
			log.Println("shutting down gRPC server...")

			s.GracefulStop()

			<-ctx.Done()
		}
	}()

	// start gRPC server
	log.Println("starting gRPC server...")
	if err := s.Serve(listen); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
